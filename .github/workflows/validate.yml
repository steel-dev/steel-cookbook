name: Validate examples

on:
  pull_request:
  push:
    branches: [main]

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: npm ci
      - run: npm run examples:validate

  discover:
    runs-on: ubuntu-latest
    needs: validate
    outputs:
      matrix: ${{ steps.discover.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - id: discover
        shell: bash
        run: |
          items=()
          shopt -s nullglob
          for d in examples/*; do
            [ -d "$d" ] || continue
            id="$(basename "$d")"
            if [ -f "$d/package.json" ]; then kind="node"
            elif [ -f "$d/requirements.txt" ] || [ -f "$d/pyproject.toml" ]; then kind="python"
            else kind="unknown"; fi
            items+=("{\"id\":\"$id\",\"dir\":\"$d\",\"kind\":\"$kind\"}")
          done
          printf '{"include":[%s]}\n' "$(IFS=,; echo "${items[*]}")" > matrix.json
          echo "matrix=$(cat matrix.json)" >> "$GITHUB_OUTPUT"

  run:
    runs-on: ubuntu-latest
    needs: discover
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.discover.outputs.matrix) }}
    env:
      STEEL_API_KEY: ${{ secrets.STEEL_API_KEY }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
      PIP_DISABLE_PIP_VERSION_CHECK: 1
      PYTHONUNBUFFERED: 1
    steps:
      - uses: actions/checkout@v4

      - name: Node setup
        if: matrix.kind == 'node'
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install (node)
        if: matrix.kind == 'node'
        working-directory: ${{ matrix.dir }}
        run: npm i --no-fund --no-audit

      - name: Precheck (node no-env)
        if: matrix.kind == 'node'
        working-directory: ${{ matrix.dir }}
        run: |
          if env -u STEEL_API_KEY -u OPENAI_API_KEY -u ANTHROPIC_API_KEY npm run -s start; then
            echo "Expected failure when API keys are missing";
            exit 1;
          else
            echo "Precheck passed: example failed as expected without API keys";
          fi

      - name: Start (node)
        if: matrix.kind == 'node'
        working-directory: ${{ matrix.dir }}
        run: npm run -s start

      - name: Python setup
        if: matrix.kind == 'python'
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        if: matrix.kind == 'python'
        id: pip-cache
        run: echo "dir=$(python -m pip cache dir)" >> "$GITHUB_OUTPUT"

      - uses: actions/cache@v4
        if: matrix.kind == 'python'
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: pip-${{ runner.os }}-${{ hashFiles(format('{0}/requirements.txt', matrix.dir)) }}
          restore-keys: pip-${{ runner.os }}-

      - name: Install (python)
        if: matrix.kind == 'python'
        working-directory: ${{ matrix.dir }}
        run: |
          python -m venv .venv
          . .venv/bin/activate
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Precheck (python no-env)
        if: matrix.kind == 'python'
        working-directory: ${{ matrix.dir }}
        run: |
          . .venv/bin/activate
          if env -u STEEL_API_KEY -u OPENAI_API_KEY -u ANTHROPIC_API_KEY -u GEMINI_API_KEY python main.py; then
            echo "Expected failure when API keys are missing";
            exit 1;
          else
            echo "Precheck passed: example failed as expected without API keys";
          fi

      - name: Start (python)
        if: matrix.kind == 'python'
        working-directory: ${{ matrix.dir }}
        run: |
          . .venv/bin/activate
          if [ -f main.py ]; then python main.py; else echo "missing main.py"; exit 1; fi
